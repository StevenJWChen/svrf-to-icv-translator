// ICV DRC Rules translated from SVRF
// Technology: Example 180nm
// Process Node: 180nm
// Generated by SVRF to ICV Translator
// Total Rules: 28
// Total Layers: 13

// Run Options
run_options {
    layout_file = "layout.gds";
    output_dir = "./icv_results";
    temp_dir = "./icv_temp";
    report_file = "drc_report.txt";
    summary_file = "drc_summary.txt";
}

// Layer Definitions
LAYER M1 = 100;
LAYER M2 = 200;
LAYER M3 = 300;
LAYER VIA1 = 400;
LAYER VIA2 = 500;
LAYER POLY = 600;
LAYER ACTIVE = 700;
LAYER NWELL = 800;
LAYER CONTACT = 900;
LAYER NMOS_GATE = POLY & ACTIVE;
LAYER PMOS_GATE = POLY & ACTIVE & NWELL;
LAYER ALL_METAL = M1 | M2 | M3;
LAYER ALL_VIA = VIA1 | VIA2;

// Width Check Rules
// Rule: M1_WIDTH
// Description: M1 minimum width violation
rule m1_width {
    check_rule = width(M1) < 0.25;
    error_message = "M1 minimum width violation";
}

// Rule: M2_WIDTH
// Description: M2 minimum width violation
rule m2_width {
    check_rule = width(M2) < 0.3;
    error_message = "M2 minimum width violation";
}

// Rule: M3_WIDTH
// Description: M3 minimum width violation
rule m3_width {
    check_rule = width(M3) < 0.4;
    error_message = "M3 minimum width violation";
}

// Rule: VIA1_SIZE
// Description: VIA1 minimum size violation
rule via1_size {
    check_rule = width(VIA1) < 0.2;
    error_message = "VIA1 minimum size violation";
}

// Rule: VIA2_SIZE
// Description: VIA2 minimum size violation
rule via2_size {
    check_rule = width(VIA2) < 0.25;
    error_message = "VIA2 minimum size violation";
}

// Rule: POLY_WIDTH
// Description: POLY minimum width violation
rule poly_width {
    check_rule = width(POLY) < 0.15;
    error_message = "POLY minimum width violation";
}

// Rule: ACTIVE_WIDTH
// Description: ACTIVE minimum width violation
rule active_width {
    check_rule = width(ACTIVE) < 0.2;
    error_message = "ACTIVE minimum width violation";
}

// Rule: CONTACT_SIZE
// Description: CONTACT minimum size violation
rule contact_size {
    check_rule = width(CONTACT) < 0.15;
    error_message = "CONTACT minimum size violation";
}

// Rule: NWELL_WIDTH
// Description: NWELL minimum width violation
rule nwell_width {
    check_rule = width(NWELL) < 1.0;
    error_message = "NWELL minimum width violation";
}

// Spacing Check Rules
// Rule: M1_SPACE
// Description: M1 minimum spacing violation
rule m1_space {
    check_rule = space(M1) < 0.25;
    error_message = "M1 minimum spacing violation";
}

// Rule: M2_SPACE
// Description: M2 minimum spacing violation
rule m2_space {
    check_rule = space(M2) < 0.3;
    error_message = "M2 minimum spacing violation";
}

// Rule: M3_SPACE
// Description: M3 minimum spacing violation
rule m3_space {
    check_rule = space(M3) < 0.4;
    error_message = "M3 minimum spacing violation";
}

// Rule: VIA1_SPACE
// Description: VIA1 minimum spacing violation
rule via1_space {
    check_rule = space(VIA1) < 0.25;
    error_message = "VIA1 minimum spacing violation";
}

// Rule: POLY_SPACE
// Description: POLY minimum spacing violation
rule poly_space {
    check_rule = space(POLY) < 0.2;
    error_message = "POLY minimum spacing violation";
}

// Rule: ACTIVE_SPACE
// Description: ACTIVE minimum spacing violation
rule active_space {
    check_rule = space(ACTIVE) < 0.25;
    error_message = "ACTIVE minimum spacing violation";
}

// Rule: CONTACT_SPACE
// Description: CONTACT minimum spacing violation
rule contact_space {
    check_rule = space(CONTACT) < 0.2;
    error_message = "CONTACT minimum spacing violation";
}

// Rule: NWELL_SPACE
// Description: NWELL minimum spacing violation
rule nwell_space {
    check_rule = space(NWELL) < 1.2;
    error_message = "NWELL minimum spacing violation";
}

// Area Check Rules
// Rule: M1_AREA
// Description: M1 minimum area violation
rule m1_area {
    check_rule = area(M1) < 0.1;
    error_message = "M1 minimum area violation";
}

// Enclosure Check Rules
// Rule: VIA1_ENCLOSED_M1
// Description: VIA1 not properly enclosed by M1
rule via1_enclosed_m1 {
    check_rule = enclosure(M1, VIA1) >= 0.05;
    error_message = "VIA1 not properly enclosed by M1";
}

// Rule: VIA1_ENCLOSED_M2
// Description: VIA1 not properly enclosed by M2
rule via1_enclosed_m2 {
    check_rule = enclosure(M2, VIA1) >= 0.05;
    error_message = "VIA1 not properly enclosed by M2";
}

// Rule: VIA2_ENCLOSED_M2
// Description: VIA2 not properly enclosed by M2
rule via2_enclosed_m2 {
    check_rule = enclosure(M2, VIA2) >= 0.1;
    error_message = "VIA2 not properly enclosed by M2";
}

// Rule: VIA2_ENCLOSED_M3
// Description: VIA2 not properly enclosed by M3
rule via2_enclosed_m3 {
    check_rule = enclosure(M3, VIA2) >= 0.1;
    error_message = "VIA2 not properly enclosed by M3";
}

// Rule: CONTACT_ENCLOSED_ACTIVE
// Description: CONTACT not properly enclosed by ACTIVE
rule contact_enclosed_active {
    check_rule = enclosure(ACTIVE, CONTACT) >= 0.05;
    error_message = "CONTACT not properly enclosed by ACTIVE";
}

// Rule: CONTACT_ENCLOSED_POLY
// Description: CONTACT not properly enclosed by POLY
rule contact_enclosed_poly {
    check_rule = enclosure(POLY, CONTACT) >= 0.05;
    error_message = "CONTACT not properly enclosed by POLY";
}

// Length Check Rules
// Rule: POLY_GATE_LENGTH
// Description: POLY gate length violation
rule poly_gate_length {
    check_rule = length(NMOS_GATE) < 0.18;
    error_message = "POLY gate length violation";
}

// Inter-Layer Spacing Rules
// Rule: POLY_ACTIVE_SPACE
// Description: POLY to ACTIVE spacing violation
rule poly_active_space {
    check_rule = space(POLY, ACTIVE) < 0.1;
    error_message = "POLY to ACTIVE spacing violation";
}

// Rule: M1_POLY_SPACE
// Description: M1 to POLY spacing violation
rule m1_poly_space {
    check_rule = space(M1, POLY) < 0.15;
    error_message = "M1 to POLY spacing violation";
}

// Density Check Rules
// Rule: M1_DENSITY
// Description: M1 density violation
rule m1_density {
    check_rule = density(M1, 100, 100) > 0.7;
    error_message = "M1 density violation";
}

