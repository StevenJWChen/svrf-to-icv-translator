// ICV DRC Rules translated from SVRF
// Technology: Advanced FinFET 7nm
// Process Node: 7nm
// Generated by SVRF to ICV Translator
// Total Rules: 61
// Total Layers: 61

// Run Options
run_options {
    layout_file = "layout.gds";
    output_dir = "./icv_results";
    temp_dir = "./icv_temp";
    report_file = "drc_report.txt";
    summary_file = "drc_summary.txt";
}

// Layer Definitions
LAYER NWELL = 1;
LAYER PWELL = 2;
LAYER DNW = 3;
LAYER ACTIVE = 10;
LAYER GATE = 15;
LAYER POLY = 20;
LAYER NPLUS = 25;
LAYER PPLUS = 26;
LAYER PIMP = 27;
LAYER NIMP = 28;
LAYER HVTIMP = 29;
LAYER LVTIMP = 30;
LAYER SAB = 35;
LAYER CONT = 40;
LAYER M1 = 50;
LAYER V1 = 51;
LAYER M2 = 52;
LAYER V2 = 53;
LAYER M3 = 54;
LAYER V3 = 55;
LAYER M4 = 56;
LAYER V4 = 57;
LAYER M5 = 58;
LAYER V5 = 59;
LAYER M6 = 60;
LAYER V6 = 61;
LAYER M7 = 62;
LAYER V7 = 63;
LAYER M8 = 64;
LAYER V8 = 65;
LAYER M9 = 66;
LAYER V9 = 67;
LAYER M10 = 68;
LAYER AP = 70;
LAYER BJTDUMMY = 80;
LAYER VARACTOR = 85;
LAYER IND = 90;
LAYER CAP = 95;
LAYER RES = 100;
LAYER DIODE = 105;
LAYER ESD = 110;
LAYER PAD = 115;
LAYER SEAL = 120;
LAYER TEXT = 125;
LAYER PRBOUND = 130;
LAYER FRAME = 135;
LAYER NACT = ACTIVE & NIMP;
LAYER PACT = ACTIVE & PIMP;
LAYER NGATE = GATE & NIMP;
LAYER PGATE = GATE & PIMP;
LAYER HVTGATE = GATE & HVTIMP;
LAYER LVTGATE = GATE & LVTIMP;
LAYER DIFFGATE = GATE & ACTIVE;
LAYER POLYGATE = GATE ! ACTIVE;
LAYER CAPMETAL = CAP & (M1 | M2 | M3 | M4 | M5);
LAYER RESMETAL = RES & (M1 | M2 | M3 | M4 | M5);
LAYER ALLMETAL = M1 | M2 | M3 | M4 | M5 | M6 | M7 | M8 | M9 | M10;
LAYER ALLVIA = V1 | V2 | V3 | V4 | V5 | V6 | V7 | V8 | V9;
LAYER LOWERMET = M1 | M2 | M3 | M4 | M5;
LAYER UPPERMET = M6 | M7 | M8 | M9 | M10;
LAYER COREAREA = PRBOUND ! PAD;

// Width Check Rules
// Rule: NWELL_WIDTH
// Description: N-Well minimum width
rule nwell_width {
    check_rule = width(NWELL) < 0.2;
    error_message = "N-Well minimum width";
}

// Rule: DNW_WIDTH
// Description: Deep N-Well minimum width
rule dnw_width {
    check_rule = width(DNW) < 3.0;
    error_message = "Deep N-Well minimum width";
}

// Rule: ACTIVE_WIDTH
// Description: Active area minimum width
rule active_width {
    check_rule = width(ACTIVE) < 0.05;
    error_message = "Active area minimum width";
}

// Rule: GATE_WIDTH
// Description: Gate minimum width
rule gate_width {
    check_rule = width(GATE) < 0.05;
    error_message = "Gate minimum width";
}

// Rule: POLY_WIDTH
// Description: Poly minimum width
rule poly_width {
    check_rule = width(POLYGATE) < 0.05;
    error_message = "Poly minimum width";
}

// Rule: NPLUS_WIDTH
// Description: N+ implant minimum width
rule nplus_width {
    check_rule = width(NPLUS) < 0.1;
    error_message = "N+ implant minimum width";
}

// Rule: PPLUS_WIDTH
// Description: P+ implant minimum width
rule pplus_width {
    check_rule = width(PPLUS) < 0.1;
    error_message = "P+ implant minimum width";
}

// Rule: HVTIMP_WIDTH
// Description: HVT implant minimum width
rule hvtimp_width {
    check_rule = width(HVTIMP) < 0.1;
    error_message = "HVT implant minimum width";
}

// Rule: LVTIMP_WIDTH
// Description: LVT implant minimum width
rule lvtimp_width {
    check_rule = width(LVTIMP) < 0.1;
    error_message = "LVT implant minimum width";
}

// Rule: CONT_SIZE
// Description: Contact minimum size
rule cont_size {
    check_rule = width(CONT) < 0.026;
    error_message = "Contact minimum size";
}

// Rule: M1_WIDTH
// Description: Metal1 minimum width
rule m1_width {
    check_rule = width(M1) < 0.032;
    error_message = "Metal1 minimum width";
}

// Rule: M2_WIDTH
// Description: Metal2 minimum width
rule m2_width {
    check_rule = width(M2) < 0.04;
    error_message = "Metal2 minimum width";
}

// Rule: V1_SIZE
// Description: Via1 minimum size
rule v1_size {
    check_rule = width(V1) < 0.026;
    error_message = "Via1 minimum size";
}

// Rule: V2_SIZE
// Description: Via2 minimum size
rule v2_size {
    check_rule = width(V2) < 0.028;
    error_message = "Via2 minimum size";
}

// Rule: M8_WIDTH
// Description: Metal8 minimum width
rule m8_width {
    check_rule = width(M8) < 0.2;
    error_message = "Metal8 minimum width";
}

// Rule: M9_WIDTH
// Description: Metal9 minimum width
rule m9_width {
    check_rule = width(M9) < 0.4;
    error_message = "Metal9 minimum width";
}

// Rule: M10_WIDTH
// Description: Metal10 minimum width
rule m10_width {
    check_rule = width(M10) < 0.8;
    error_message = "Metal10 minimum width";
}

// Rule: CAP_WIDTH
// Description: Capacitor minimum width
rule cap_width {
    check_rule = width(CAP) < 0.1;
    error_message = "Capacitor minimum width";
}

// Rule: RES_WIDTH
// Description: Resistor minimum width
rule res_width {
    check_rule = width(RES) < 0.1;
    error_message = "Resistor minimum width";
}

// Rule: ESD_WIDTH
// Description: ESD device minimum width
rule esd_width {
    check_rule = width(ESD) < 2.0;
    error_message = "ESD device minimum width";
}

// Rule: VARACTOR_SIZE
// Description: Varactor minimum size
rule varactor_size {
    check_rule = width(VARACTOR) < 1.0;
    error_message = "Varactor minimum size";
}

// Rule: IND_WIDTH
// Description: Inductor minimum width
rule ind_width {
    check_rule = width(IND) < 2.0;
    error_message = "Inductor minimum width";
}

// Rule: SEAL_WIDTH
// Description: Seal ring minimum width
rule seal_width {
    check_rule = width(SEAL) < 10.0;
    error_message = "Seal ring minimum width";
}

// Rule: TEXT_SIZE
// Description: Text minimum size
rule text_size {
    check_rule = width(TEXT) < 1.0;
    error_message = "Text minimum size";
}

// Rule: BJTDUMMY_SIZE
// Description: BJT dummy minimum size
rule bjtdummy_size {
    check_rule = width(BJTDUMMY) < 0.5;
    error_message = "BJT dummy minimum size";
}

// Rule: FRAME_WIDTH
// Description: Frame minimum width
rule frame_width {
    check_rule = width(FRAME) < 5.0;
    error_message = "Frame minimum width";
}

// Rule: GATE_PITCH_CHECK
// Description: Gate pitch regularity check
rule gate_pitch_check {
    check_rule = width(GATE) < 0.096;
    error_message = "Gate pitch regularity check";
}

// Spacing Check Rules
// Rule: NWELL_SPACE
// Description: N-Well minimum spacing
rule nwell_space {
    check_rule = space(NWELL) < 0.46;
    error_message = "N-Well minimum spacing";
}

// Rule: DNW_SPACE
// Description: Deep N-Well minimum spacing
rule dnw_space {
    check_rule = space(DNW) < 6.0;
    error_message = "Deep N-Well minimum spacing";
}

// Rule: ACTIVE_SPACE
// Description: Active area minimum spacing
rule active_space {
    check_rule = space(ACTIVE) < 0.08;
    error_message = "Active area minimum spacing";
}

// Rule: GATE_SPACE
// Description: Gate minimum spacing
rule gate_space {
    check_rule = space(GATE) < 0.08;
    error_message = "Gate minimum spacing";
}

// Rule: POLY_SPACE
// Description: Poly minimum spacing
rule poly_space {
    check_rule = space(POLYGATE) < 0.08;
    error_message = "Poly minimum spacing";
}

// Rule: CONT_SPACE
// Description: Contact minimum spacing
rule cont_space {
    check_rule = space(CONT) < 0.03;
    error_message = "Contact minimum spacing";
}

// Rule: M1_SPACE
// Description: Metal1 minimum spacing
rule m1_space {
    check_rule = space(M1) < 0.032;
    error_message = "Metal1 minimum spacing";
}

// Rule: M2_SPACE
// Description: Metal2 minimum spacing
rule m2_space {
    check_rule = space(M2) < 0.04;
    error_message = "Metal2 minimum spacing";
}

// Rule: V1_SPACE
// Description: Via1 minimum spacing
rule v1_space {
    check_rule = space(V1) < 0.03;
    error_message = "Via1 minimum spacing";
}

// Rule: V2_SPACE
// Description: Via2 minimum spacing
rule v2_space {
    check_rule = space(V2) < 0.032;
    error_message = "Via2 minimum spacing";
}

// Rule: M8_SPACE
// Description: Metal8 minimum spacing
rule m8_space {
    check_rule = space(M8) < 0.2;
    error_message = "Metal8 minimum spacing";
}

// Rule: M9_SPACE
// Description: Metal9 minimum spacing
rule m9_space {
    check_rule = space(M9) < 0.4;
    error_message = "Metal9 minimum spacing";
}

// Rule: M10_SPACE
// Description: Metal10 minimum spacing
rule m10_space {
    check_rule = space(M10) < 0.8;
    error_message = "Metal10 minimum spacing";
}

// Rule: CAP_SPACE
// Description: Capacitor minimum spacing
rule cap_space {
    check_rule = space(CAP) < 0.15;
    error_message = "Capacitor minimum spacing";
}

// Rule: VARACTOR_SPACE
// Description: Varactor minimum spacing
rule varactor_space {
    check_rule = space(VARACTOR) < 2.0;
    error_message = "Varactor minimum spacing";
}

// Rule: IND_SPACE
// Description: Inductor minimum spacing
rule ind_space {
    check_rule = space(IND) < 5.0;
    error_message = "Inductor minimum spacing";
}

// Rule: M1_COLOR_SPACE
// Description: Metal1 same color spacing
rule m1_color_space {
    check_rule = space(M1) < 0.064;
    error_message = "Metal1 same color spacing";
}

// Rule: M2_COLOR_SPACE
// Description: Metal2 same color spacing
rule m2_color_space {
    check_rule = space(M2) < 0.08;
    error_message = "Metal2 same color spacing";
}

// Inter-Layer Spacing Rules
// Rule: NWELL_PWELL_SPACE
// Description: N-Well to P-Well spacing
rule nwell_pwell_space {
    check_rule = space(NWELL, PWELL) < 0.0;
    error_message = "N-Well to P-Well spacing";
}

// Rule: POLY_ACTIVE_SPACE
// Description: Poly to Active spacing
rule poly_active_space {
    check_rule = space(POLYGATE, ACTIVE) < 0.04;
    error_message = "Poly to Active spacing";
}

// Rule: HVTIMP_LVTIMP_SPACE
// Description: HVT to LVT implant spacing
rule hvtimp_lvtimp_space {
    check_rule = space(HVTIMP, LVTIMP) < 0.1;
    error_message = "HVT to LVT implant spacing";
}

// Rule: CONT_GATE_SPACE
// Description: Contact to Gate spacing
rule cont_gate_space {
    check_rule = space(CONT, GATE) < 0.04;
    error_message = "Contact to Gate spacing";
}

// Rule: ESD_PAD_SPACE
// Description: ESD to PAD spacing
rule esd_pad_space {
    check_rule = space(ESD, PAD) < 5.0;
    error_message = "ESD to PAD spacing";
}

// Rule: SEAL_CORE_SPACE
// Description: Seal ring to core spacing
rule seal_core_space {
    check_rule = space(SEAL, CORE) < 10.0;
    error_message = "Seal ring to core spacing";
}

// Area Check Rules
// Rule: ACTIVE_AREA_MIN
// Description: Active area minimum size
rule active_area_min {
    check_rule = area(ACTIVE) < 0.0025;
    error_message = "Active area minimum size";
}

// Rule: M1_AREA_MIN
// Description: Metal1 minimum area
rule m1_area_min {
    check_rule = area(M1) < 0.001024;
    error_message = "Metal1 minimum area";
}

// Rule: CAPMETAL_AREA
// Description: Capacitor metal minimum area
rule capmetal_area {
    check_rule = area(CAPMETAL) < 0.01;
    error_message = "Capacitor metal minimum area";
}

// Density Check Rules
// Rule: ACTIVE_DENSITY
// Description: Active area density check
rule active_density {
    check_rule = density(ACTIVE, 100, 100) < 0.2;
    error_message = "Active area density check";
}

// Rule: M1_DENSITY
// Description: Metal1 density constraints
rule m1_density {
    check_rule = density(M1, 100, 100) < 0.2;
    error_message = "Metal1 density constraints";
}

// Rule: M2_DENSITY
// Description: Metal2 density constraints
rule m2_density {
    check_rule = density(M2, 100, 100) < 0.2;
    error_message = "Metal2 density constraints";
}

// Rule: ALLMETAL_DENSITY
// Description: Total metal density
rule allmetal_density {
    check_rule = density(ALLMETAL, 100, 100) > 0.6;
    error_message = "Total metal density";
}

// Length Check Rules
// Rule: GATE_LENGTH
// Description: Gate minimum length
rule gate_length {
    check_rule = length(DIFFGATE) < 0.04;
    error_message = "Gate minimum length";
}

// Rule: RES_LENGTH
// Description: Resistor minimum length
rule res_length {
    check_rule = length(RES) < 0.5;
    error_message = "Resistor minimum length";
}

// Width Constraint Rules
// Rule: METAL_SLOT_CHECK
// Description: Metal slotting requirement
rule metal_slot_check {
    check_rule = width(M1) > 20.0;
    error_message = "Metal slotting requirement";
}

